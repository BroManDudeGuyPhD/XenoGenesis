<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css"
        integrity="sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk=" crossorigin="anonymous" />
    <title>X</title>
    <link rel="stylesheet" href="/client/css/style.css">
    <link rel="icon" type="image/x-icon" href="/client/img/favicon.png">
    <style>
        /* Game page specific chat styling */
        .chat-container {
            margin: 20px 0 !important;
            max-width: 100% !important;
        }
        
        .chat-sidebar h2, .chat-sidebar h3 {
            display: block !important;
            visibility: visible !important;
        }
        
        .chat-sidebar {
            background: #7386ff !important;
            color: #fff !important;
            min-width: 250px;
        }
        
        .chat-messages {
            background-color: #40444b !important;
            color: #ffffff;
            min-height: 200px;
        }
        
        #gameDiv {
            position: relative;
            z-index: 1;
        }
        
        #belowGame {
            position: relative;
            z-index: 2;
            clear: both;
        }
    </style>
</head>

<body style="background-color: #23272a;">

    <div id="gameDiv" style="max-width: 1600px; min-height: 800px; margin: 0 auto;">
        <!-- Behavioral Economics Experiment Interface -->
        <div id="experimentContainer" style="width: 100%; min-height: 800px; background-color: #36393f; padding: 20px; box-sizing: border-box; margin-bottom: 20px;">
            
            <!-- Header with experiment info -->
            <div id="experimentHeader" style="background-color: #40444b; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
                <h2 style="color: #ffffff; margin: 0; text-align: center;">Behavioral Economics Experiment</h2>
                <div id="triadStatus" style="color: #b9bbbe; text-align: center; margin-top: 10px;">
                    <span id="playerCount">Waiting for players...</span>
                    <span id="playerPosition" style="margin-left: 20px;"></span>
                </div>
            </div>

            <!-- Experiment Status Panel -->
            <div id="statusPanel" style="display: flex; gap: 20px; margin-bottom: 20px;">
                <div class="status-card" style="background-color: #40444b; padding: 15px; border-radius: 5px; flex: 1; text-align: center;">
                    <h3 style="color: #ffffff; margin: 0; font-size: 18px;">Round</h3>
                    <span id="currentRound" style="color: #7289da; font-size: 24px; font-weight: bold;">0</span>
                    <span style="color: #b9bbbe;"> / </span>
                    <span id="maxRounds" style="color: #b9bbbe; font-size: 18px;">500</span>
                </div>
                <div class="status-card" style="background-color: #40444b; padding: 15px; border-radius: 5px; flex: 1; text-align: center;">
                    <h3 style="color: #ffffff; margin: 0; font-size: 18px;">White Tokens</h3>
                    <span id="whiteTokens" style="color: #43b581; font-size: 24px; font-weight: bold;">0</span>
                </div>
                <div class="status-card" style="background-color: #40444b; padding: 15px; border-radius: 5px; flex: 1; text-align: center;">
                    <h3 style="color: #ffffff; margin: 0; font-size: 18px;">Black Tokens</h3>
                    <span id="blackTokens" style="color: #f04747; font-size: 24px; font-weight: bold;">0</span>
                </div>
                <div class="status-card" style="background-color: #40444b; padding: 15px; border-radius: 5px; flex: 1; text-align: center;">
                    <h3 style="color: #ffffff; margin: 0; font-size: 18px;">Earnings</h3>
                    <span id="totalEarnings" style="color: #faa61a; font-size: 24px; font-weight: bold;">$0.00</span>
                </div>
            </div>

            <!-- Poker Table Visualization -->
            <div id="pokerTable" style="background-color: #40444b; padding: 20px; border-radius: 5px; margin-bottom: 20px; position: relative; height: 200px; overflow: hidden;">
                <h3 style="color: #ffffff; text-align: center; margin: 0 0 15px 0;">Triad Table</h3>
                
                <!-- Player Positions -->
                <div id="leftPlayer" class="poker-seat" style="position: absolute; left: 20px; top: 50%; transform: translateY(-50%); width: 120px; height: 80px; background-color: #36393f; border: 2px solid #7289da; border-radius: 8px; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    <div class="player-name" style="color: #ffffff; font-size: 14px; font-weight: bold;"></div>
                    <div class="player-status" style="color: #b9bbbe; font-size: 12px;"></div>
                    <div class="ai-indicator" style="color: #faa61a; font-size: 10px; display: none;">🤖 AI</div>
                </div>
                
                <div id="topPlayer" class="poker-seat" style="position: absolute; top: 20px; left: 50%; transform: translateX(-50%); width: 120px; height: 80px; background-color: #36393f; border: 2px solid #7289da; border-radius: 8px; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    <div class="player-name" style="color: #ffffff; font-size: 14px; font-weight: bold;"></div>
                    <div class="player-status" style="color: #b9bbbe; font-size: 12px;"></div>
                    <div class="ai-indicator" style="color: #faa61a; font-size: 10px; display: none;">🤖 AI</div>
                </div>
                
                <div id="rightPlayer" class="poker-seat" style="position: absolute; right: 20px; top: 50%; transform: translateY(-50%); width: 120px; height: 80px; background-color: #36393f; border: 2px solid #7289da; border-radius: 8px; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    <div class="player-name" style="color: #ffffff; font-size: 14px; font-weight: bold;"></div>
                    <div class="player-status" style="color: #b9bbbe; font-size: 12px;"></div>
                    <div class="ai-indicator" style="color: #faa61a; font-size: 10px; display: none;">🤖 AI</div>
                </div>
                
                <!-- Moderator Position -->
                <div id="moderatorPosition" class="moderator-seat" style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); width: 100px; height: 60px; background-color: #2c2f33; border: 2px solid #43b581; border-radius: 8px; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    <div style="color: #43b581; font-size: 12px; font-weight: bold;">Moderator</div>
                    <div style="color: #b9bbbe; font-size: 10px;">Game Host</div>
                </div>
                
                <!-- Table Center -->
                <div id="tableCenter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 100px; height: 60px; background-color: #2c2f33; border: 2px solid #72767d; border-radius: 8px; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    <div style="color: #ffffff; font-size: 12px; font-weight: bold;">Round</div>
                    <div id="tableRound" style="color: #7289da; font-size: 16px;">0</div>
                </div>
            </div>

            <!-- Main Game Area -->
            <div id="gameArea" style="background-color: #40444b; padding: 20px; border-radius: 5px; margin-bottom: 20px; min-height: 400px;">
                
                <!-- Lobby Phase -->
                <div id="lobbyPhase" style="text-align: center; padding: 50px;">
                    <h2 style="color: #ffffff; margin-bottom: 20px;">Waiting for Triad Formation</h2>
                    <p style="color: #b9bbbe; font-size: 18px; margin-bottom: 30px;">Need exactly 3 players to begin the experiment</p>
                    <div id="playerList" style="color: #7289da; font-size: 16px;"></div>
                    <button id="startExperimentBtn" style="display: none; background-color: #43b581; color: white; padding: 15px 30px; font-size: 18px; border: none; border-radius: 5px; cursor: pointer; margin-top: 20px;">
                        Start Experiment
                    </button>
                </div>

                <!-- Decision Grid Phase -->
                <div id="decisionPhase" style="display: none; text-align: center;">
                    <div id="roundInfo" style="margin-bottom: 30px;">
                        <h3 id="activePlayer" style="color: #ffffff; margin-bottom: 10px;"></h3>
                        <p id="conditionInfo" style="color: #b9bbbe; font-size: 16px;"></p>
                        <p id="tokenPoolInfo" style="color: #faa61a; font-size: 14px;"></p>
                    </div>

                    <!-- 2x3 Decision Grid -->
                    <div id="decisionGrid" style="margin: 30px auto; max-width: 600px;">
                        <div style="color: #ffffff; margin-bottom: 15px; font-size: 18px;">Choose Your Action:</div>
                        
                        <!-- Row 1 (Impulsive - Odd) -->
                        <div class="grid-row" style="display: flex; margin-bottom: 15px; justify-content: center;">
                            <span style="color: #ffffff; width: 120px; text-align: right; padding-right: 20px; line-height: 50px;">Impulsive:</span>
                            <button class="grid-cell impulsive" data-choice="impulsive" data-col="1" style="width: 80px; height: 50px; margin: 0 5px; border: 2px solid #f04747; background-color: #40444b; color: #ffffff; cursor: pointer;">
                                <span class="grid-symbol">+</span>
                            </button>
                            <button class="grid-cell impulsive" data-choice="impulsive" data-col="2" style="width: 80px; height: 50px; margin: 0 5px; border: 2px solid #f04747; background-color: #40444b; color: #ffffff; cursor: pointer;">
                                <span class="grid-symbol">-</span>
                            </button>
                            <button class="grid-cell impulsive" data-choice="impulsive" data-col="3" style="width: 80px; height: 50px; margin: 0 5px; border: 2px solid #f04747; background-color: #40444b; color: #ffffff; cursor: pointer;">
                                <span class="grid-symbol">+</span>
                            </button>
                        </div>

                        <!-- Row 2 (Self-Control - Even) -->
                        <div class="grid-row" style="display: flex; justify-content: center;">
                            <span style="color: #ffffff; width: 120px; text-align: right; padding-right: 20px; line-height: 50px;">Self-Control:</span>
                            <button class="grid-cell self-control" data-choice="self-control" data-col="1" style="width: 80px; height: 50px; margin: 0 5px; border: 2px solid #43b581; background-color: #40444b; color: #ffffff; cursor: pointer;">
                                <span class="grid-symbol">-</span>
                            </button>
                            <button class="grid-cell self-control" data-choice="self-control" data-col="2" style="width: 80px; height: 50px; margin: 0 5px; border: 2px solid #43b581; background-color: #40444b; color: #ffffff; cursor: pointer;">
                                <span class="grid-symbol">+</span>
                            </button>
                            <button class="grid-cell self-control" data-choice="self-control" data-col="3" style="width: 80px; height: 50px; margin: 0 5px; border: 2px solid #43b581; background-color: #40444b; color: #ffffff; cursor: pointer;">
                                <span class="grid-symbol">-</span>
                            </button>
                        </div>
                    </div>

                    <div id="choiceStatus" style="margin-top: 30px; color: #b9bbbe; font-size: 16px;"></div>
                </div>

                <!-- Round Results Phase -->
                <div id="resultsPhase" style="display: none; text-align: center;">
                    <h3 style="color: #ffffff; margin-bottom: 20px;">Round Results</h3>
                    <div id="roundResults" style="color: #b9bbbe; margin-bottom: 20px;"></div>
                    <div id="tokenUpdate" style="color: #43b581; font-size: 18px; margin-bottom: 20px;"></div>
                    <div id="culturantStatus" style="color: #7289da; font-size: 16px;"></div>
                </div>

                <!-- Final Results Phase -->
                <div id="finalResults" style="display: none; text-align: center;">
                    <h2 style="color: #ffffff; margin-bottom: 20px;">Experiment Complete</h2>
                    <div id="finalStats" style="color: #b9bbbe; margin-bottom: 20px;"></div>
                    <button id="exportDataBtn" style="background-color: #7289da; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;">
                        Export Data
                    </button>
                </div>
            </div>

            <!-- Token Pool Status -->
            <div id="tokenPoolStatus" style="background-color: #40444b; padding: 15px; border-radius: 5px; text-align: center;">
                <span style="color: #ffffff; margin-right: 20px;">Global White Token Pool:</span>
                <span id="globalTokenPool" style="color: #faa61a; font-size: 18px; font-weight: bold;">2500</span>
                <span style="color: #b9bbbe; margin-left: 20px;">Culturants Produced:</span>
                <span id="culturantCount" style="color: #7289da; font-size: 16px; font-weight: bold;">0</span>
            </div>
        </div>
    

        <div id="belowGame" style="margin-top: 30px; clear: both;">
            <div id="chat-container" class="chat-container" style="position: relative; z-index: 1;">
                <header class="chat-header">
                    <i class="fa-thin fa-globe-stand"></i>
                    <span style="color: #ffffff; font-weight: bold;">Experiment Chat</span>
                    <a id="leave-btn" class="btn">Leave Room</a>
                </header>
                <main class="chat-main">
                    <div class="chat-sidebar" style="min-height: 300px;">
                        <h3 style="color: #ffffff; margin-bottom: 10px;"><i class="fas fa-comments"></i> Room:</h3>
                        <h2 id="room-name" style="color: #7289da; font-size: 16px; background: rgba(0, 0, 0, 0.3); padding: 8px; margin-bottom: 15px; border-radius: 4px;">Loading...</h2>
                        <h3 style="color: #ffffff; margin-bottom: 10px;"><i class="fas fa-users"></i> Players (<span id="userCount">0</span>):</h3>
                        <ul id="users" style="color: #b9bbbe;"></ul>
                    </div>
                    <div class="chat-messages" id="globalChatDiv" style="display: none; background-color: #40444b;"></div>
                    <div class="chat-messages" id="roomChatDiv" style="background-color: #40444b;"></div>
                </main>
                <div class="chat-form-container">
                    <form id="chat-form">
                        <input id="msg" type="text" placeholder="Enter message..." required autocomplete="off" />
                        <button class="btn" type="submit"><i class="fas fa-paper-plane"></i> Send</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="/client/Inventory.js"></script>
    <script src="/client/client.js"></script>
    <script>
        var socket = io();

        // Behavioral Experiment Variables
        var experimentState = {
            currentRound: 0,
            playerPosition: 0,
            gameActive: false,
            currentChoice: null
        };

        // Legacy function stubs (keep for compatibility but disabled)
        var changeMap = function(){
            console.log("🚫 Map change disabled in behavioral experiment mode");
        }

        var joinGame = function(){
            console.log("🚫 Legacy joinGame called - using new behavioral experiment flow");
        }

        var createGame = function(){
            console.log("🚫 Legacy createGame called - using new behavioral experiment flow");
        }

        // Behavioral experiment initialization
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🧠 Behavioral experiment interface loaded');
            
            // Show initial lobby state
            updateLobbyDisplay();
        });

        function updateLobbyDisplay() {
            document.getElementById('lobbyPhase').style.display = 'block';
            document.getElementById('decisionPhase').style.display = 'none';
            document.getElementById('resultsPhase').style.display = 'none';
            document.getElementById('finalResults').style.display = 'none';
        }

        // Handle room user updates for triad formation
        socket.on('roomUsers', ({ room, users, usersCount }) => {
            console.log(`👥 Room users updated: ${usersCount} players`);
            
            // Always show start button now that we support flexible player counts
            document.getElementById('startExperimentBtn').style.display = 'block';
            
            // Update player count display
            if (usersCount === 1) {
                document.getElementById('playerCount').textContent = `Ready for testing! (${usersCount}/3 players - AI will fill remaining spots)`;
            } else if (usersCount < 3) {
                document.getElementById('playerCount').textContent = `Players in triad: ${usersCount}/3 (AI can fill remaining spots)`;
            } else {
                document.getElementById('playerCount').textContent = `Triad Complete! (${usersCount}/3 players)`;
            }
            
            // Update player list with human players
            let playerListHTML = '';
            users.forEach((user, index) => {
                playerListHTML += `<div>Player ${index + 1}: ${user.username} 👤</div>`;
            });
            
            // Show indication that AI players will be added
            if (usersCount < 3) {
                for (let i = usersCount; i < 3; i++) {
                    playerListHTML += `<div style="color: #7289da;">Player ${i + 1}: AI Player (will be added) 🤖</div>`;
                }
            }
            
            document.getElementById('playerList').innerHTML = playerListHTML;
        });

        // Handle AI players added notification
        socket.on('aiPlayersAdded', (data) => {
            console.log(`🤖 AI players added: ${data.aiCount} players`);
            
            // Update the display to show AI players were added
            const playerListElement = document.getElementById('playerList');
            const currentHTML = playerListElement.innerHTML;
            const updatedHTML = currentHTML.replace(/\(will be added\)/g, '(added)');
            playerListElement.innerHTML = updatedHTML;
            
            // Update status message
            document.getElementById('playerCount').textContent = `Triad Complete! (${data.humanCount} humans + ${data.aiCount} AI = 3 total)`;
        });

        // Handle experiment start
        socket.on('experimentStarted', (data) => {
            console.log('🧠 Experiment started!');
            experimentState.gameActive = true;
            
            // Hide lobby, show decision phase
            document.getElementById('lobbyPhase').style.display = 'none';
            document.getElementById('decisionPhase').style.display = 'block';
            
            // Initialize status display
            document.getElementById('currentRound').textContent = '1';
            document.getElementById('maxRounds').textContent = data.maxRounds || '500';
            document.getElementById('globalTokenPool').textContent = data.globalTokenPool || '2500';
        });

        // Handle new round
        socket.on('newRound', (data) => {
            console.log(`🔄 Round ${data.round} started`);
            experimentState.currentRound = data.round;
            experimentState.currentChoice = null;
            
            // Update round display
            document.getElementById('currentRound').textContent = data.round;
            document.getElementById('activePlayer').textContent = `Round ${data.round}`;
            document.getElementById('conditionInfo').textContent = `Condition: ${data.condition}`;
            document.getElementById('tokenPoolInfo').textContent = `White tokens remaining: ${data.globalTokenPool}`;
            
            // Reset choice status
            document.getElementById('choiceStatus').textContent = 'Make your choice...';
            
            // Enable decision buttons
            const buttons = document.querySelectorAll('.grid-cell');
            buttons.forEach(btn => {
                btn.disabled = false;
                btn.style.opacity = '1';
            });
            
            // Show decision phase
            document.getElementById('decisionPhase').style.display = 'block';
            document.getElementById('resultsPhase').style.display = 'none';
        });

        // Handle round results
        socket.on('roundResult', (data) => {
            console.log('📊 Round result received', data);
            
            // Update token displays
            if (data.playerTokens) {
                document.getElementById('whiteTokens').textContent = data.playerTokens.white || 0;
                document.getElementById('blackTokens').textContent = data.playerTokens.black || 0;
                document.getElementById('totalEarnings').textContent = `$${(data.playerTokens.earnings || 0).toFixed(2)}`;
            }
            
            // Update global pool
            document.getElementById('globalTokenPool').textContent = data.globalTokenPool;
            document.getElementById('culturantCount').textContent = data.totalCulturants || 0;
            
            // Show results
            let resultsHTML = '<div style="margin-bottom: 15px;"><strong>Player Choices:</strong></div>';
            if (data.choices && data.choices.length > 0) {
                data.choices.forEach((choice, index) => {
                    const isAI = choice.isAI ? ' 🤖' : ' 👤';
                    const choiceColor = choice.choice === 'impulsive' ? '#f04747' : '#43b581';
                    resultsHTML += `<div style="color: ${choiceColor};">Player ${index + 1}: ${choice.choice}${isAI}</div>`;
                });
            }
            
            document.getElementById('roundResults').innerHTML = resultsHTML;
            
            // Show token update
            if (data.tokensAwarded) {
                document.getElementById('tokenUpdate').textContent = `You received ${data.tokensAwarded.white} white tokens!`;
            }
            
            // Show culturant status
            if (data.culturantProduced) {
                document.getElementById('culturantStatus').textContent = '🎉 Culturant produced! All players receive +1 black token';
            } else {
                document.getElementById('culturantStatus').textContent = '';
            }
            
            // Show results phase
            document.getElementById('decisionPhase').style.display = 'none';
            document.getElementById('resultsPhase').style.display = 'block';
            
            // Auto-advance to next round after 3 seconds
            setTimeout(() => {
                document.getElementById('resultsPhase').style.display = 'none';
            }, 3000);
        });

        // Handle experiment end
        socket.on('experimentEnd', (data) => {
            console.log('🏁 Experiment ended', data);
            experimentState.gameActive = false;
            
            // Show final results
            let finalStatsHTML = `
                <div style="margin-bottom: 10px;"><strong>Final Statistics:</strong></div>
                <div>Total Rounds: ${data.totalRounds}</div>
                <div>White Tokens Earned: ${data.finalTokens ? data.finalTokens.white : 0}</div>
                <div>Black Tokens Earned: ${data.finalTokens ? data.finalTokens.black : 0}</div>
                <div>Total Earnings: $${data.finalTokens ? (data.finalTokens.earnings || 0).toFixed(2) : '0.00'}</div>
                <div>Culturants Produced: ${data.totalCulturants || 0}</div>
            `;
            
            document.getElementById('finalStats').innerHTML = finalStatsHTML;
            
            // Hide other phases, show final results
            document.getElementById('decisionPhase').style.display = 'none';
            document.getElementById('resultsPhase').style.display = 'none';
            document.getElementById('finalResults').style.display = 'block';
        });

        // Start experiment button handler
        document.addEventListener('click', function(e) {
            if (e.target && e.target.id === 'startExperimentBtn') {
                console.log('🚀 Starting experiment...');
                socket.emit('startExperiment');
            }
        });

        // Decision grid button handlers
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('grid-cell') && experimentState.gameActive) {
                if (experimentState.currentChoice) {
                    console.log('⚠️ Choice already made this round');
                    return;
                }
                
                const choice = e.target.getAttribute('data-choice');
                const col = e.target.getAttribute('data-col');
                
                console.log(`✅ Choice made: ${choice} (column ${col})`);
                experimentState.currentChoice = choice;
                
                // Disable all buttons
                const buttons = document.querySelectorAll('.grid-cell');
                buttons.forEach(btn => {
                    btn.disabled = true;
                    btn.style.opacity = '0.5';
                });
                
                // Highlight selected button
                e.target.style.opacity = '1';
                e.target.style.backgroundColor = choice === 'impulsive' ? '#f04747' : '#43b581';
                
                // Update status
                document.getElementById('choiceStatus').textContent = `You chose: ${choice} - Waiting for other players...`;
                
                // Send choice to server
                socket.emit('makeChoice', {
                    choice: choice,
                    column: parseInt(col)
                });
            }
        });

        // Export data button handler
        document.addEventListener('click', function(e) {
            if (e.target && e.target.id === 'exportDataBtn') {
                console.log('📁 Requesting data export...');
                socket.emit('exportData');
            }
        });

        // Handle data export
        socket.on('dataExport', (data) => {
            console.log('📁 Data export received');
            
            // Create downloadable CSV file
            const csvContent = data.csvData;
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `behavioral_experiment_${new Date().toISOString().slice(0, 10)}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });

        // Inventory management (legacy but keep for compatibility)
        var inventory = new Inventory([], socket, false);
        socket.on('updateInventory', function(items){
            inventory.items = items;
            inventory.refreshRender();
        });

        // Legacy canvas variables (keep to prevent errors)
        var ctx = null;
        var ctxUi = null;
        var Player = {list: {}};

        // Legacy drawing functions (disabled for behavioral experiment)
        var drawMap = function(){
            // Disabled for behavioral experiment
        };

        var drawPlayers = function(){
            // Disabled for behavioral experiment
        };

        var drawBullets = function(){
            // Disabled for behavioral experiment
        };

        var drawUi = function(){
            // Disabled for behavioral experiment
        };

        console.log('🧠 Behavioral Economics Experiment Ready');
    </script>

</body>
</html>